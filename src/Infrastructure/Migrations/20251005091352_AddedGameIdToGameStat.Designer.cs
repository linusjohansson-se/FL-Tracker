// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251005091352_AddedGameIdToGameStat")]
    partial class AddedGameIdToGameStat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.GameStats.GameStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Adr")
                        .HasColumnType("double precision")
                        .HasColumnName("adr");

                    b.Property<int>("Assists")
                        .HasColumnType("integer")
                        .HasColumnName("assists");

                    b.Property<int>("ClutchAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("clutch_attempts");

                    b.Property<double>("ClutchRatio")
                        .HasColumnType("double precision")
                        .HasColumnName("clutch_ratio");

                    b.Property<int>("ClutchWins")
                        .HasColumnType("integer")
                        .HasColumnName("clutch_wins");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Deaths")
                        .HasColumnType("integer")
                        .HasColumnName("deaths");

                    b.Property<double>("Fdpr")
                        .HasColumnType("double precision")
                        .HasColumnName("fdpr");

                    b.Property<int>("FirstDeaths")
                        .HasColumnType("integer")
                        .HasColumnName("first_deaths");

                    b.Property<int>("FirstKills")
                        .HasColumnType("integer")
                        .HasColumnName("first_kills");

                    b.Property<double>("Fkpr")
                        .HasColumnType("double precision")
                        .HasColumnName("fkpr");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<int>("HeadshotKills")
                        .HasColumnType("integer")
                        .HasColumnName("headshot_kills");

                    b.Property<double>("HsRatio")
                        .HasColumnType("double precision")
                        .HasColumnName("hs_ratio");

                    b.Property<int>("Kills")
                        .HasColumnType("integer")
                        .HasColumnName("kills");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.Property<int>("RoundsPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("rounds_played");

                    b.Property<int>("TotalDamage")
                        .HasColumnType("integer")
                        .HasColumnName("total_damage");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_game_stats");

                    b.ToTable("game_stats", "public");
                });

            modelBuilder.Entity("Domain.Games.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("MatchId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_id");

                    b.Property<Guid?>("TeamA")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("team_a");

                    b.Property<string>("TeamAName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("team_a_name");

                    b.Property<int>("TeamAScore")
                        .HasColumnType("integer")
                        .HasColumnName("team_a_score");

                    b.Property<Guid?>("TeamB")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("team_b");

                    b.Property<string>("TeamBName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("team_b_name");

                    b.Property<int>("TeamBScore")
                        .HasColumnType("integer")
                        .HasColumnName("team_b_score");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("Winner")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("winner");

                    b.HasKey("Id")
                        .HasName("pk_games");

                    b.ToTable("games", "public");
                });

            modelBuilder.Entity("Domain.Players.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FaceitId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("faceit_id");

                    b.Property<string>("LeetifyId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("leetify_id");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nickname");

                    b.Property<string>("SteamId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("steam_id");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_players");

                    b.ToTable("players", "public");
                });

            modelBuilder.Entity("Domain.Teams.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("team_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.ToTable("teams", "public");
                });
#pragma warning restore 612, 618
        }
    }
}
